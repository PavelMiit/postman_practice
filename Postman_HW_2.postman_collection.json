{
	"info": {
		"_postman_id": "1e9ab512-b266-44f3-ba65-10fd88bf0784",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20303416"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = JSON.parse(responseBody)\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"testName\", function () {\r",
							"    let Name = jsonData.name\r",
							"    pm.expect(Name).to.eql('Pavel');\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"testAge\", function () {\r",
							"    let age = jsonData.age\r",
							"    pm.expect(age).to.eql('34');\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"testSalary\", function () {\r",
							"    let salary = jsonData.salary\r",
							"    pm.expect(salary).to.eql(400);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//  8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"testNameReq\", function () {\r",
							"    let Name = jsonData.name\r",
							"    let NameReq = req.name\r",
							"    pm.expect(Name).to.eql(NameReq);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"testAgeReq\", function () {\r",
							"    let age = jsonData.age\r",
							"    let ageReq = req.age\r",
							"    pm.expect(age).to.eql(ageReq);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							" pm.test(\"testSalaryReq\", function () {\r",
							"    let salary = jsonData.salary\r",
							"    let salaryReq = req.salary\r",
							"    let salaryReqNumber = Number(salaryReq)\r",
							"    pm.expect(salary).to.eql(salaryReqNumber);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							" pm.test(\"testSalaryReq1_5Year\", function () {\r",
							"    let salary1_5Year = jsonData.family.u_salary_1_5_year\r",
							"    let salaryReq = req.salary\r",
							"    let salaryReqNumber = Number(salaryReq) * 4\r",
							"    pm.expect(salary1_5Year).to.eql(salaryReqNumber);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							" \r",
							"\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonDataResp = JSON.parse(responseBody)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let dataReq = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"testNameResp\", function () {\r",
							"    let nameResp = jsonDataResp.name\r",
							"    let nameReq = dataReq.name\r",
							"    pm.expect(nameResp).to.eql(nameReq);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"testAgeResp\", function () {\r",
							"    let ageResp = jsonDataResp.age\r",
							"    let ageReq = dataReq.age\r",
							"    pm.expect(ageResp).to.eql(ageReq);\r",
							"});\r",
							"\r",
							"// . Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"testSalaryResp\", function () {\r",
							"    let salaryResp = jsonDataResp.salary\r",
							"    let salaryReq = dataReq.salary\r",
							"    let salaryReqNumber = Number(salaryReq)\r",
							"    pm.expect(salaryResp).to.eql(salaryReqNumber);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							" console.log(jsonDataResp.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check name dog\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp.family.pets.dog)).to.include(\"name\");\r",
							"})\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check age dog\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp.family.pets.dog)).to.include(\"age\");\r",
							"})\r",
							" \r",
							"\r",
							"//  11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check name is Luky\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp.family.pets.dog.name)).to.include(\"Luky\");\r",
							"})\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check age is 4\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp.family.pets.dog.age)).to.include(\"4\");\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Pavel&age=34&salary=400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonDataResp = JSON.parse(responseBody)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let jsonDataReq = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"testNameResp\", function () {\r",
							"    let nameResp = jsonDataResp.name\r",
							"    let nameReq = jsonDataReq.name\r",
							"    pm.expect(nameResp).to.eql(nameReq);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"testAgeResp\", function () {\r",
							"    let ageResp = jsonDataResp.age\r",
							"    let ageReq = jsonDataReq.age\r",
							"    let ageReqNumber = Number(ageReq)\r",
							"    pm.expect(ageResp).to.eql(ageReqNumber);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(jsonDataReq.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonDataResp.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonDataResp.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonDataResp.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonDataResp.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"testNameResp\", function () {\r",
							"    let salaryResp = jsonDataResp.salary[0]\r",
							"    let salaryReq = +jsonDataReq.salary\r",
							"    pm.expect(salaryResp).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"testNameResp\", function () {\r",
							"   let salaryResp1 = +jsonDataResp.salary[1]\r",
							"    let salaryReq = jsonDataReq.salary * 2\r",
							"    pm.expect(salaryResp1).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)    \r",
							"pm.test(\"testNameResp\", function () {\r",
							"    let salaryResp2 = +jsonDataResp.salary[2]\r",
							"    let salaryReq = jsonDataReq.salary * 3\r",
							"    pm.expect(salaryResp2).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Pavel\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"34\")\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"400\")\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"const salaryForMassive = jsonDataResp.salary\r",
							"for (let i = 0; i < salaryForMassive.length; i += 1) {\r",
							"  console.log(salaryForMassive[i]);\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// console.log(salaryResp2)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonDataResp = JSON.parse(responseBody)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let jsonDataReq = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp)).to.include(\"start_qa_salary\");\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp)).to.include(\"qa_salary_after_6_months\");\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp)).to.include(\"qa_salary_after_12_months\");\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp)).to.include(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check qa_salary_after_3.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp)).to.include(\"qa_salary_after_3.5_year\");\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check person\", function () {\r",
							"    pm.expect(JSON.stringify(jsonDataResp)).to.include(\"person\");\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"test fo start_qa_salary\", function () {\r",
							"       let salaryResp = jsonDataResp.start_qa_salary\r",
							"       let salaryReq = +jsonDataReq.salary\r",
							"    pm.expect(salaryResp).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							" pm.test(\"test fo qa_salary_after_6_months\", function () {\r",
							"    let salaryResp = jsonDataResp.qa_salary_after_6_months\r",
							"    let salaryReq = +jsonDataReq.salary * 2  \r",
							"    pm.expect(salaryResp).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"test fo qa_salary_after_12_months\", function () {\r",
							"    let salaryResp = jsonDataResp.qa_salary_after_12_months\r",
							"    let salaryReq = jsonDataReq.salary * 2.7 \r",
							"    pm.expect(salaryResp).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"test fo qa_salary_after_1.5_year\", function () {\r",
							"    let salaryResp = jsonDataResp[\"qa_salary_after_1.5_year\"]\r",
							"    let salaryReq = jsonDataReq.salary * 3.3\r",
							"    pm.expect(salaryResp).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" pm.test(\"test fo qa_salary_after_3.5_years\", function () {\r",
							"    let salaryResp = jsonDataResp[\"qa_salary_after_3.5_years\"]\r",
							"    let salaryReq = jsonDataReq.salary * 3.8\r",
							"    pm.expect(salaryResp).to.eql(salaryReq);\r",
							"});\r",
							" \r",
							"//  19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"  pm.test(\"test fo first element\", function () {\r",
							"    let elementResp = jsonDataResp.person.u_name[1]\r",
							"    let salaryReq = +jsonDataReq.salary\r",
							"    pm.expect(elementResp).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"  pm.test(\"test fo u_age\", function () {\r",
							"    let ageResp = jsonDataResp.person.u_age\r",
							"    let ageReq = +jsonDataReq.age\r",
							"    pm.expect(ageResp).to.eql(ageReq);\r",
							"});\r",
							"\r",
							"//   21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"  pm.test(\"test fo u_salary_5_years\", function () {\r",
							"    let salary5Resp = jsonDataResp.person.u_salary_5_years\r",
							"   let salaryReq = +jsonDataReq.salary * 4.2\r",
							"    pm.expect(salary5Resp).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let person = jsonDataResp.person\r",
							"\r",
							"for (let prop in person) {\r",
							"console.log(prop + \": \" + person[prop])\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}